{
	"info": {
		"_postman_id": "1d9cc20b-627f-4165-bc60-6697a4fff98e",
		"name": "Test Explore With Me - Feature Subscription",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15944290"
	},
	"item": [
		{
			"name": "NotFoundException",
			"item": [
				{
					"name": "Subscribe without user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"subscribe"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "0"
								},
								{
									"key": "uid",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscribe without subscriber",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"subscribe"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "0"
								},
								{
									"key": "uid",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inactive subscription without subscriber",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								"delete"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get number of subscribers without user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:uid/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":uid",
								"subscribers"
							],
							"variable": [
								{
									"key": "uid",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user events without user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user events without subscriber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "0"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user events without subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user2.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{uid}}"
								},
								{
									"key": "uid",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get events the user participates in without user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/participates/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								"participates",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get events the user participates in without subscriber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/participates/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								"participates",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "0"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get events the user participates in without user subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user2.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/participates/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								"participates",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BadRequestException",
			"item": [
				{
					"name": "The subscription has already been subscribed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"subscribe"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "The subscription has already been unsubscribed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"        await api.unsubscribe(subscriber.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поле: status\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/unsubscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"unsubscribe"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscription",
			"item": [
				{
					"name": "Subscribe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const subscriberId = pm.collectionVariables.get('subscriberId');\r",
									"const uid = pm.collectionVariables.get('uid');\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Запрос на подписку должен содержать: id, userId, subscriberId, subscribed\", function () {\r",
									"pm.expect(response).to.have.property('id');\r",
									"pm.expect(response).to.have.property('userId');\r",
									"pm.expect(response).to.have.property('subscriberId');\r",
									"pm.expect(response).to.have.property('subscribed');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле subscribed должно быть TRUE\", function () {\r",
									"    pm.expect(response.subscribed).equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Id пользователей в запросе и в ответе должны совпадать\", function () {\r",
									"    pm.expect(response.userId).equal(uid);\r",
									"    pm.expect(response.subscriberId).equal(subscriberId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"subscribe"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsubscribe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const subscriberId = pm.collectionVariables.get('subscriberId');\r",
									"const uid = pm.collectionVariables.get('uid');\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Запрос на подписку должен содержать: id, userId, subscriberId, subscribed\", function () {\r",
									"pm.expect(response).to.have.property('id');\r",
									"pm.expect(response).to.have.property('userId');\r",
									"pm.expect(response).to.have.property('subscriberId');\r",
									"pm.expect(response).to.have.property('subscribed');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле subscribed должно быть FALSE\", function () {\r",
									"    pm.expect(response.subscribed).equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Id пользователей в запросе и в ответе должны совпадать\", function () {\r",
									"    pm.expect(response.userId).equal(uid);\r",
									"    pm.expect(response.subscriberId).equal(subscriberId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/unsubscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"unsubscribe"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inactive subscription",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const subscription = await api.addSubscription(subscriber.id, user.id);\r",
									"        await api.unsubscribe(subscriber.id, user.id);\r",
									"        const foundedSubscriptions = await api.findSubscriptions(subscriber.id, false);\r",
									"\r",
									"        pm.collectionVariables.set(\"subscriberId\", subscriber.id);\r",
									"        pm.collectionVariables.set(\"subscriptionId\", subscription.id);\r",
									"        pm.collectionVariables.set(\"response\", foundedSubscriptions);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const subscriptionId = pm.collectionVariables.get('subscriptionId');\r",
									"const subscriberId = pm.collectionVariables.get('subscriberId');\r",
									"\r",
									"pm.test(\"Подписка должна быть найдена до выполнения запроса\", function(){\r",
									"    pm.expect(source.length).to.eql(1);\r",
									"    pm.expect(source[0].id).to.eql(subscriptionId);\r",
									"});\r",
									"\r",
									"let body\r",
									"const req = {\r",
									"    url: \"http://localhost:8080/subscription/\" + subscriberId + '?active=' + false,\r",
									"    method: \"GET\",\r",
									"    body: body == null ? \"\" : JSON.stringify(body),\r",
									"    header: { \"Content-Type\": \"application/json\" },\r",
									"};\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Подписка должна быть удалена после выполнения запроса\", function(){\r",
									"        pm.expect(response.json().length).to.eql(0);\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								"delete"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get number of subscribers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const subscriber2 = await api.addUser(rnd.getUser());\r",
									"        const subscriber3 = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"        await api.addSubscription(subscriber2.id, user.id);\r",
									"        await api.addSubscription(subscriber3.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const uid = pm.collectionVariables.get('uid');\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество подписок и подписчиков должно совпадать\", function(){\r",
									"    pm.expect(3).to.eql(response);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:uid/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":uid",
								"subscribers"
							],
							"variable": [
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all subscriptions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const user3 = await api.addUser(rnd.getUser());\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"        await api.addSubscription(subscriber.id, user2.id);\r",
									"        await api.addSubscription(subscriber.id, user3.id);\r",
									"\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const subscriberId = pm.collectionVariables.get('subscriberId');\r",
									"const uid = pm.collectionVariables.get('uid');\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Полученные подписки должны содержать: id, user\", function () {\r",
									"    pm.expect(response[0]).to.have.property('id');\r",
									"    pm.expect(response[0]).to.have.property('user');\r",
									"});\r",
									"\r",
									"pm.test(\"Полученный пользователь в подписке должен совпадать с пользователем на которого подписались\", function () {\r",
									"    pm.expect(response[0].user.id).equal(uid);\r",
									"});\r",
									"\r",
									"pm.test(\"Количество подписок должно совпадать\", function () {\r",
									"    pm.expect(response.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user events",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json()[0];\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate\", function () {\r",
									"    pm.expect(response).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(response.id).to.eql(eventId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get events the user participates in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const subscriber = await api.addUser(rnd.getUser());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user2.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        await api.addSubscription(subscriber.id, user.id);\r",
									"        const req = await api.publishParticipationRequest(event.id, user.id);\r",
									"        if (event.requestModeration) {\r",
									"            await api.acceptParticipationRequest(event.id, user2.id, req.id)\r",
									"        }\r",
									"\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"        pm.collectionVariables.set('subscriberId', subscriber.id);\r",
									"        pm.collectionVariables.set('uid', user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json()[0];\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate\", function () {\r",
									"    pm.expect(response).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(response.id).to.eql(eventId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscription/:subscriberId/participates/:uid/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscription",
								":subscriberId",
								"participates",
								":uid",
								"events"
							],
							"variable": [
								{
									"key": "subscriberId",
									"value": "{{subscriberId}}"
								},
								{
									"key": "uid",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addSubscription(subscriberId, userId, verbose=null) {",
					"        return this.post('/subscription/' + subscriberId + '/' + userId + '/subscribe', null, \"Ошибка при добавлении подписки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async unsubscribe(subscriberId, userId, verbose=null) {",
					"        return this.patch('/subscription/' + subscriberId + '/' + userId + '/unsubscribe', \"Ошибка при отмене подписки: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async findSubscriptions(subscriberId, active, verbose=null) {",
					"        return this.get('/subscription/' + subscriberId + '?active=' + active, null, \"Ошибка при поиске подписки\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "subscriberId",
			"value": "",
			"type": "number"
		},
		{
			"key": "uid",
			"value": "",
			"type": "number"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "subscriptionId",
			"value": "",
			"type": "number"
		},
		{
			"key": "eventId",
			"value": ""
		}
	]
}